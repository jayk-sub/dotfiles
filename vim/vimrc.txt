call plug#begin('~/.vim/plugged')
  " Requirements: ACK, Git, autocompleteme, checkers
  " Plugins
  Plug 'tpope/vim-sensible'                               " Basic conf.
  Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' } " File tree.
  Plug 'Xuyuanp/nerdtree-git-plugin'                      " Git support.
  Plug 'jistr/vim-nerdtree-tabs'                          " Interact with tabs.
  Plug 'junegunn/goyo.vim'                                " Dark room.
  Plug 'scrooloose/syntastic'                             " Syntax checker.
  Plug 'tpope/vim-fugitive'                               " Git.
  Plug 'scrooloose/nerdcommenter'                         " Comments.
  Plug 'tpope/vim-surround'                               " Brackets.
  Plug 'luochen1990/rainbow'                              " Brackets color.
  Plug 'shemerey/vim-peepopen'                            " Path search.
  Plug 'ctrlpvim/ctrlp.vim'                               " Ctrl-P.
  Plug 'fisadev/vim-ctrlp-cmdpalette'                     " Ctrl-Palete.
  Plug 'vim-airline/vim-airline'                          " Better statusline.
  Plug 'vim-airline/vim-airline-themes'                   " Themes for statusline
  Plug 'airblade/vim-gitgutter'                           " Git Diff.
  Plug 'gorodinskiy/vim-coloresque'                       " RGB Colors.
  Plug 'raimondi/delimitmate'                             " Close parenthesis.
  Plug 'majutsushi/tagbar'                                " Outline tags.
  Plug 'oplatek/Conque-Shell'                             " Terminal.
  Plug 'terryma/vim-multiple-cursors'                     " Mutiple cursors.
  Plug 'mileszs/ack.vim'                                  " ACK.
  Plug 'tpope/vim-abolish'                                " Substitutions.
  Plug 'beloglazov/vim-online-thesaurus'                  " Dictionary.
  Plug 'tpope/vim-eunuch'                                 " File explorer.
  Plug 'tpope/vim-surround'                               " Surround stuff.
  Plug 'sheerun/vim-polyglot'                             " Improves syntax.
  Plug 'jeetsukumaran/vim-buffergator'                    " Buffer management.
  Plug 'wincent/terminus'                                 " Improves term sup.
  Plug 'godlygeek/tabular'                                " Aligns stuff.
  " Themes
  Plug 'altercation/vim-colors-solarized'
  Plug 'jpo/vim-railscasts-theme'
  Plug '29decibel/codeschool-vim-theme'
  Plug 'endel/vim-github-colorscheme'
  Plug 'trusktr/seti.vim'
  Plug 'blueshirts/darcula'
  Plug 'reedes/vim-colors-pencil'

  " Autcomplete
  Plug 'Valloric/YouCompleteMe', { 'do': './install.py --gocode-completer --tern-completer' }
  Plug 'rdnetto/YCM-Generator', { 'branch': 'stable'}
  " ./install.py --gocode-completer --tern-completer


  " Filetype wise
  " HTML Expander
  Plug 'rstacruz/sparkup', {'for': 'html'}

  " PHP &  HackLang
  Plug 'hhvm/vim-hack', {'for': ['php','hacklang']}

  " Javascript & JSON.
  Plug 'elzr/vim-json', {'for':['json','javascript']}

  " CSV
  Plug 'chrisbra/csv.vim', {'for': 'csv'}

  " Markdown
  Plug 'tpope/vim-markdown'

  " Folding
  Plug 'reedes/vim-pencil', {'for': ['markdown','mkd','text']}
  Plug 'nelstrom/vim-markdown-folding', {'for':['markdown', 'mkd', 'text']}

  " Grammar problems.
  Plug 'reedes/vim-wordy', {'for':['markdown', 'mkd', 'text']}

  " Autocorrect
  Plug 'reedes/vim-litecorrect', {'for':['markdown', 'mkd', 'text']}

call plug#end()

set history=700
set wildmenu
set wildmode=list:longest
set ruler
set number
set hid
set backspace=eol,start,indent
set ignorecase
set smartcase
set hlsearch
set magic
set encoding=utf8
set modifiable
set expandtab
set tabstop=4
set softtabstop=4
set autoindent
set shiftround
set shiftwidth=4
set smarttab
set ai
set si
set mouse=a
set noerrorbells
set nocompatible
filetype plugin indent on
filetype plugin on
set omnifunc=syntaxcomplete#Complete
set wrap
set linebreak
set nolist
set showmode
set title
set ttyfast
set cmdheight=2
set columns=80
set colorcolumn=80
set textwidth=79
set t_Co=256
set fillchars+=stl:\ ,stlnc:\
set termencoding=utf-8
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/vendor/*,*/node_modules/*,*.swo
let mapleader='\'

" Disable .swp .swo etc.
set nobackup
set nowb
set noswapfile

" Theme selector
syntax enable
set background=dark
colorscheme seti

if has("gui_macvim")
  " Disables the scrollbars.
  set guioptions-=r
  set guioptions-=L
  set guioptions-=T
  set guioptions-=m
  " Press Ctrl-Tab to switch between open tabs (like browser tabs) to
  " the right side. Ctrl-Shift-Tab goes the other way.
  map <C-Tab> :tabnext<CR>
  map <C-S-Tab> :tabprev<CR>

  map! <C-Tab> <C-O>:tabnext<CR>
  map! <C-S-Tab> <C-O>:tabprev<CR>

  " Switch to specific tab numbers with Command-number
  map <D-1> :tabn 1<CR>
  map <D-2> :tabn 2<CR>
  map <D-3> :tabn 3<CR>
  map <D-4> :tabn 4<CR>
  map <D-5> :tabn 5<CR>
  map <D-6> :tabn 6<CR>
  map <D-7> :tabn 7<CR>
  map <D-8> :tabn 8<CR>
  map <D-9> :tabn 9<CR>

  map! <D-1> <C-O>:tabn 1<CR>
  map! <D-2> <C-O>:tabn 2<CR>
  map! <D-3> <C-O>:tabn 3<CR>
  map! <D-4> <C-O>:tabn 4<CR>
  map! <D-5> <C-O>:tabn 5<CR>
  map! <D-6> <C-O>:tabn 6<CR>
  map! <D-7> <C-O>:tabn 7<CR>
  map! <D-8> <C-O>:tabn 8<CR>
  map! <D-9> <C-O>:tabn 9<CR>

  " Command-0 goes to the last tab
  map <D-0> :tablast<CR>
  map! <D-0> <C-O>:tablast<CR>

  " Movement keys
  let macvim_skip_cmd_opt_movement = 1
  no   <D-Left>       <Home>
  no!  <D-Left>       <Home>
  no   <M-Left>       <C-Left>
  no!  <M-Left>       <C-Left>
  no   <D-Right>      <End>
  no!  <D-Right>      <End>
  no   <M-Right>      <C-Right>
  no!  <M-Right>      <C-Right>
  ino  <M-BS>         <C-w>
  ino  <D-BS>         <C-u>
  no   <D-Down>       <C-End>
  ino  <D-Down>       <C-End>
  no   <D-Up>         <C-Home>
  ino  <D-Up>         <C-Home>

  " Lane swapping on MacVim
  map <M-Down> :m .+1<CR>==
  map <M-Up> :m .-2<CR>==
  map! <M-Down> <Esc>:m .+1<CR>==gi
  map! <M-Up> <Esc>:m .-2<CR>==gi

else

  " Lane swapping (console)
  map [B :m .+1<CR>==
  map [A :m .-2<CR>==
  map! [B <Esc>:m .+1<CR>==gi
  map! [A <Esc>:m .-2<CR>==gi
  
  " Word movement
  " map ^[f w
  map ^[b b
  " map! ^[f <Esc>wi
  map! ^[b <Esc>bi

endif

" Reload .vimrc
map <F5> :source $MYVIMRC<CR>
map! <F5> <C-O>:source $MYVIMRC<CR>

" Spellcheck
map <S-F7> :setlocal spell! spelllang=en_gb<CR>
map! <S-F7> <C-O>:setlocal spell! spelllang=en_gb<CR>i

" Trim white spaces
map <silent> <Leader>tt :%s/\s\+$//g<CR>

"Pane navigation
map <C-M-Left> <C-w>h
map <C-M-Up> <C-w>k
map <C-M-Down> <C-w>j
map <C-M-Right> <C-w>l

map! <C-M-Left> <C-O><C-w>hi
map! <C-M-Up> <C-O><C-w>ki
map! <C-M-Down> <C-O><C-w>ji
map! <C-M-Right> <C-O><C-w>li

" NerdTree config.
map <C-t> :NERDTreeToggle<CR>
map! <C-t> <C-O>:NERDTreeToggle<CR>i

" map <C-M-t> :NERDTreeTabsToggle<CR>
" map! <C-M-t> <C-O>:NERDTreeTabsToggle<CR>i

" NerdTree git
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ "Unknown"   : "?"
    \ }

" Syntastic config - Requires validators. Read the docs.
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_error_symbol = '✘'
let g:syntastic_warning_symbol = "▲"
let g:syntastic_python_python_exec = '/usr/local/bin/python3'
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_python_checkers = ['flake8', 'pep8','pylint', 'python']

" Rainbow parenthesis
let g:rainbow_active = 1
map <F4> :RainbowToggle<CR>
map! <F4> <C-O>:RainbowToggle<CR>i
autocmd BufNewFile,BufRead :normal RainbowToggle<CR>

" CmdPCommandPalette
let g:ctrlp_map = '<c-p>'
let g:ctrl_cmd = 'CtrlP'
let g:ctrlp_user_command = 'find %s -type f | grep -v "`cat ~/.vim/ctrlpignore.txt`"'
let g:ctrlp_cmdpalette_execute = 0
let g:ctrlp_show_hidden = 0
let g:ctrlp_dotfiles = -1

map! <C-p> <C-O>:CtrlP<CR>

map <C-l> :CtrlPCmdPalette<CR>
map! <C-l> <C-O>:CtrlPCmdPalette<CR>

" Vim Airline
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.whitespace = 'Ξ'


let g:airline#extensions#tabline#enabled = 1
set laststatus=2

if has("gui_running")
  let s:uname = system("uname")
  if s:uname == "Darwin\n"
    set guifont=Inconsolata\ for\ Powerline:h15
  endif
endif

" Tagbar - Requires CTags.
map <F6> :TagbarToggle<CR>
map! <F6> <C-O>:TagbarToggle<CR>i
" Uncomment to open tagbar automatically whenever possible
" autocmd BufEnter * nested :call tagbar#autoopen(0)

" Conque-Shell
let g:ConqueTerm_PyVersion = 2
let g:ConqueTerm_FastMode = 0
let g:ConqueTerm_Color = 2
let g:ConqueTerm_ReadUnfocused = 1
let g:ConqueTerm_PromptRegex = '^\w\+@[0-9A-Za-z_.-]\+:[0-9A-Za-z_./\~,:-]\+\$'
let g:ConqueTerm_InsertOnEnter = 1

" Omnifunc
inoremap <C-Space> <C-x><C-o>
inoremap <C-@> <C-Space>

" http://vim.wikia.com/wiki/Make_Vim_completion_popup_menu_work_just_like_in_an_IDE
set completeopt=longest,menuone
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
  \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

inoremap <expr> <M-,> pumvisible() ? '<C-n>' :
  \ '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

" OnlineThesaurus
let g:online_thesaurus_map_keys = 0

" Pencil
let g:pencil#wrapModeDefault = 'soft'   " default is 'hard'

augroup pencil
    autocmd!
    autocmd FileType textile, markdown, mkd call pencil#init({'wrap': 'hard'})
augroup END"

" Lite correct
augroup litecorrect
    autocmd!
    autocmd FileType markdown,mkd call litecorrect#init()
    autocmd FileType textile call litecorrect#init()
augroup END

" YouCompleteMe
autocmd! User YouCompleteMe if !has('vim_starting') | call youcompleteme#Enable() | endif
let g:ycm_min_num_of_chars_for_completion = 0
let g:ycm_auto_trigger = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_seed_identifiers_with_syntax = 1

" DelimitMate
let delimitMate_expand_cr = 1
