" .vimrc - Alberto Martinez de Murga <alberto@threkk.com>
"
" Requirements: 
" - FZF
" - Ack/AG
" - CTags
" - Git
" - GPG
" - Checkers: eslint, PEP8, Go, hh_client
" - Autocomplete: Tern.js, Jedi, GoCode, hh_client

" System variables {{{
let g:is_nvim = has('nvim')
let g:is_gui = has('gui_macvim') || has('gui_vimr')

let g:has_ack = executable('ack')
let g:has_ag = executable('ag')
let g:has_ctags = executable('ctags')
let g:has_fzf = executable('fzf')
let g:has_git = executable('git')

if !g:has_ack || !g:has_ag
    echom 'Neither AG or ACK are installed in the system.'
endif

if !g:has_fzf
    echom 'FZF is not installed in the system.'
endif

if !g:has_git
    echom 'Git is not installed in the system.'
endif

if !g:has_ctags
    echom 'CTags is not installed in the system.'
endif
" }}}

" Plugin installation {{{

" Conditional function {{{
" From https://github.com/junegunn/vim-plug/wiki/faq#conditional-activation
function! Cond(cond, ...)
  let opts = get(a:000, 0, {})
  return a:cond ? opts : extend(opts, { 'on': [], 'for': [] })
endfunction
" }}}

call plug#begin('~/.vim/plugged')
  " Basic configuration, only necessary for Vim and MacVim {{{
  Plug 'tpope/vim-sensible', Cond(!g:is_nvim)             " Basic conf.
  Plug 'wincent/terminus',   Cond(!g:is_gui)              " Improves term sup.
  " }}}

  " File tree menu {{{
  Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' } " File tree.
  Plug 'Xuyuanp/nerdtree-git-plugin'                      " Git support.
  " }}}
 
  " Airline {{{
  Plug 'vim-airline/vim-airline'                          " Better statusline.
  Plug 'vim-airline/vim-airline-themes'                   " Themes for statusline
  " }}}

  " Brackets {{{
  Plug 'tpope/vim-surround'                               " Brackets operations.
  Plug 'raimondi/delimitmate'                             " Close parenthesis.
  Plug 'luochen1990/rainbow'                              " Brackets color.
  " }}}
  
  " Git {{{
  Plug 'tpope/vim-fugitive',     Cond(g:has_git)          " Git basic commands.
  Plug 'airblade/vim-gitgutter', Cond(g:has_git)          " Git Diff.
  " }}}

  " Syntax checker {{{
  " NOTE: It requires to have syntax checkers installed.
  Plug 'scrooloose/syntastic'                             " Syntax checker.
  " }}}

  " Autocomplete {{{
  " 
  " TODO: Make sure that the binary has loaded.
  " NOTE: Maybe substitute for invidual completers. Check on the vim-plug
  " repository for references.
  " 
  " - Tern.js --> 'marijnh/tern_for_vim'
  " - GoCode  --> 'nsf/gocode'
  Plug 'Valloric/YouCompleteMe', { 'do': './install.py --gocode-completer --tern-completer' }
  Plug 'ervandew/supertab'                                " Autcompl with TAB
  " }}}
  
  " Outline {{{
  Plug 'majutsushi/tagbar', Cond(g:has_ctags)             " Outline tags.
  " }}}
  
  " FZF {{{
  Plug '/usr/local/opt/fzf'
  Plug 'junegunn/fzf.vim', Cond(g:has_fzf)
  " }}}

  " ACK {{{
  Plug 'mileszs/ack.vim', Cond(g:has_ack || g:has_ag)     " ACK.
  " }}}

  " Other {{{
  Plug 'godlygeek/tabular'                                " Aligns stuff.
  Plug 'skywind3000/asyncrun.vim'                         " Async requests.
  Plug 'terryma/vim-multiple-cursors'                     " Mutiple cursors.
  " }}}
                            
  " Themes {{{
  Plug 'altercation/vim-colors-solarized'
  Plug 'jpo/vim-railscasts-theme'
  Plug '29decibel/codeschool-vim-theme'
  Plug 'endel/vim-github-colorscheme'
  Plug 'trusktr/seti.vim'
  Plug 'blueshirts/darcula'
  Plug 'reedes/vim-colors-pencil'
  Plug 'jacoborus/tender'
  " }}}

  " Languages
  " Python {{{
  Plug 'davidhalter/jedi-vim',          {'for': 'python'}
  Plug 'tweekmonster/braceless.vim',    { 'for': ['python', 'yaml'] } 
  " }}}
  
  " JavaScript {{{
  Plug 'pangloss/vim-javascript',       {'for': 'javascript'}
  Plug 'mxw/vim-jsx',                   {'for': 'javascript'}
  Plug 'elzr/vim-json',                 {'for': ['json','javascript']}
  " }}}

  " Go {{{
  Plug 'fatih/vim-go',                  {'for': 'go'}
  " }}}
  
  " PHP {{{
  Plug 'shawncplus/phpcomplete.vim',    {'for': 'php'}
  Plug 'hhvm/vim-hack',                 {'for': ['php','hacklang']}
  " }}}

  " Web design {{{
  Plug 'gorodinskiy/vim-coloresque'     " Colours preview.
  Plug 'othree/html5.vim',              {'for': 'html'}
  " }}}

  " Markdown {{{
  Plug 'tpope/vim-markdown',            { 'for': 'markdown' }
  Plug 'junegunn/goyo.vim',             { 'for': 'markdown' }        
  Plug 'nelstrom/vim-markdown-folding', { 'for':['markdown', 'text']}
  " }}}
  
  " Others {{{
  Plug 'chrisbra/csv.vim',              {'for': 'csv'}
  Plug 'joonty/vdebug',                 {'for': ['php', 'python', 'javascript', 'perl', 'ruby']}
  Plug 'lervag/vimtex',                 {'for': 'tex'}
  " }}}

call plug#end()
" }}}

set history=700
set wildmenu
set wildmode=list:longest
set ruler
set number
set hid
set backspace=eol,start,indent
set ignorecase
set smartcase
set hlsearch
set magic
set encoding=utf8
set modifiable
set expandtab
set tabstop=4
set softtabstop=4
set autoindent
set shiftround
set shiftwidth=4
set smarttab
set ai
set si
set mouse=a
set noerrorbells
set nocompatible
filetype plugin indent on
filetype plugin on
set omnifunc=syntaxcomplete#Complete
set wrap
set linebreak
set nolist
set showmode
set title
set ttyfast
set cmdheight=2
set columns=80
set colorcolumn=80
set textwidth=79
set t_Co=256
set fillchars+=stl:\ ,stlnc:\
set termencoding=utf-8
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/vendor/*,*/node_modules/*,*.swo
set foldmethod=syntax

" Leader and scape are remapped
imap § <ESC>
let mapleader='\'

" Disable .swp .swo etc.
set nobackup
set nowb
set noswapfile

" Theme selector
syntax enable
set background=dark
colorscheme tender

if g:is_gui
  " Disables the scrollbars.
  set guioptions-=r
  set guioptions-=L
  set guioptions-=T
  set guioptions-=m
  " Press Ctrl-Tab to switch between open tabs (like browser tabs) to
  " the right side. Ctrl-Shift-Tab goes the other way.
  map <C-Tab> :tabnext<CR>
  map <C-S-Tab> :tabprev<CR>

  map! <C-Tab> <C-O>:tabnext<CR>
  map! <C-S-Tab> <C-O>:tabprev<CR>

  " Switch to specific tab numbers with Command-number
  map <D-1> :tabn 1<CR>
  map <D-2> :tabn 2<CR>
  map <D-3> :tabn 3<CR>
  map <D-4> :tabn 4<CR>
  map <D-5> :tabn 5<CR>
  map <D-6> :tabn 6<CR>
  map <D-7> :tabn 7<CR>
  map <D-8> :tabn 8<CR>
  map <D-9> :tabn 9<CR>

  map! <D-1> <C-O>:tabn 1<CR>
  map! <D-2> <C-O>:tabn 2<CR>
  map! <D-3> <C-O>:tabn 3<CR>
  map! <D-4> <C-O>:tabn 4<CR>
  map! <D-5> <C-O>:tabn 5<CR>
  map! <D-6> <C-O>:tabn 6<CR>
  map! <D-7> <C-O>:tabn 7<CR>
  map! <D-8> <C-O>:tabn 8<CR>
  map! <D-9> <C-O>:tabn 9<CR>

  " Command-0 goes to the last tab
  map <D-0> :tablast<CR>
  map! <D-0> <C-O>:tablast<CR>

  " Movement keys
  let macvim_skip_cmd_opt_movement = 1
  no   <D-Left>       <Home>
  no!  <D-Left>       <Home>
  no   <D-Right>      <End>
  no!  <D-Right>      <End>
  no   <M-Left>       <C-Left>
  no!  <M-Left>       <C-Left>
  no   <M-Right>      <C-Right>
  no!  <M-Right>      <C-Right>
  ino  <M-BS>         <C-w>
  ino  <D-BS>         <C-u>
  no   <D-Up>         <C-Home>
  ino  <D-Up>         <C-Home>
  no   <D-Down>       <C-End>
  ino  <D-Down>       <C-End>

  " Lane swapping on MacVim
  map <M-Down> :m .+1<CR>==
  map <M-Up> :m .-2<CR>==
  map! <M-Down> <Esc>:m .+1<CR>==gi
  map! <M-Up> <Esc>:m .-2<CR>==gi

else
  set term=$TERM
  " Lane swapping (console)
  map [B :m .+1<CR>==
  map [A :m .-2<CR>==
  map! [B <Esc>:m .+1<CR>==gi
  map! [A <Esc>:m .-2<CR>==gi

  " Word movement
  map ^[f e
  map ^[b b
  map! ^[f <Esc>ea
  map! ^[b <Esc>bi

endif

" Trim white spaces
function! <SID>StripTrailingWS()
    " save last search & cursor position
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Clear trailing whitespace
    %s/\s\+$//e
    "Restore saved cursor & search.
    let @/=_s
    call cursor(l, c)
endfunction
map <Leader>tt :call <SID>StripTrailingWS()<CR>

"Pane navigation
map <C-M-Left> <C-w>h
map <C-M-Up> <C-w>k
map <C-M-Down> <C-w>j
map <C-M-Right> <C-w>l

map! <C-M-Left> <C-O><C-w>hi
map! <C-M-Up> <C-O><C-w>ki
map! <C-M-Down> <C-O><C-w>ji
map! <C-M-Right> <C-O><C-w>li

" GPG
augroup aencrypted
    au!
    autocmd BufReadPre,FileReadPre *.asc set viminfo=
    au BufReadPost *.asc :%!gpg1 -q -d 2> /dev/null
    au BufReadPost *.asc |redraw
    au BufWritePre *.asc :%!gpg1 -q -e -a --default-recipient-self 2> /dev/null
    au BufWritePost *.asc u
    au VimLeave *.asc :!clear
augroup END

" NerdTree config.
map <C-t> :NERDTreeToggle<CR>
map! <C-t> <C-O>:NERDTreeToggle<CR>i

" NerdTree git
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ "Unknown"   : "?"
    \ }

" Syntastic config - Requires validators. Read the docs.
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_error_symbol = '✘'
let g:syntastic_warning_symbol = "▲"
let g:syntastic_python_python_exec = '/usr/local/bin/python3'
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_python_checkers = ['flake8', 'pep8', 'python']

" Rainbow parenthesis
let g:rainbow_active = 1
map <F4> :RainbowToggle<CR>
map! <F4> <C-O>:RainbowToggle<CR>i
autocmd BufNewFile,BufRead :normal RainbowToggle<CR>
autocmd BufNewFile,BufRead :insert <C-O>:RainbowToggle<CR>i

" CmdPCommandPalette
let g:ctrlp_map = '<c-p>'
let g:ctrl_cmd = 'CtrlP'
let g:ctrlp_user_command = 'find %s -type f | grep -v "`cat ~/.vim/ctrlpignore.txt`"'
let g:ctrlp_cmdpalette_execute = 0
let g:ctrlp_show_hidden = 0
let g:ctrlp_dotfiles = -1

map! <C-p> <C-O>:CtrlP<CR>

map <C-l> :CtrlPCmdPalette<CR>
map! <C-l> <C-O>:CtrlPCmdPalette<CR>

" ACK.vim
if g:has_ag
  let g:ackprg = 'ag --vimgrep --silent'
endif

" Enable folding with the spacebar
nnoremap <space> za

" Vim Airline
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.whitespace = 'Ξ'


let g:airline#extensions#tabline#enabled = 1
set laststatus=2

if has("gui_running")
  let s:uname = system("uname")
  if s:uname == "Darwin\n"
    set guifont=Hack:h14
  endif
endif

" Tagbar - Requires CTags.
map <F6> :TagbarToggle<CR>
map! <F6> <C-O>:TagbarToggle<CR>i
" Uncomment to open tagbar automatically whenever possible
" autocmd BufEnter * nested :call tagbar#autoopen(0)

" Omnifunc
map! <C-Space> <C-x><C-o>

" http://vim.wikia.com/wiki/Make_Vim_completion_popup_menu_work_just_like_in_an_IDE
set completeopt=longest,menuone
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
  \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

inoremap <expr> <M-,> pumvisible() ? '<C-n>' :
  \ '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

" Pencil
let g:pencil#wrapModeDefault = 'soft'   " default is 'hard'

augroup pencil
    autocmd!
    autocmd FileType textile, markdown, mkd call pencil#init({'wrap': 'hard'})
augroup END"

" Lite correct
augroup litecorrect
    autocmd!
    autocmd FileType markdown,mkd call litecorrect#init()
    autocmd FileType textile call litecorrect#init()
augroup END

" YouCompleteMe
autocmd! User YouCompleteMe if !has('vim_starting') | call youcompleteme#Enable() | endif
let g:ycm_min_num_of_chars_for_completion = 0
let g:ycm_auto_trigger = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_seed_identifiers_with_syntax = 1

" Braceless.vim
autocmd FileType python,yaml BracelessEnable +indent +fold +highlight

" DelimitMate
let delimitMate_expand_cr = 1

" vim-javascript
let g:javascript_plugin_jsdoc = 1

" vim-jsx
let g:jsx_ext_required = 0

" vim-go
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)

let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_fields = 1
let g:go_highlight_types = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1

let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }
let g:go_list_type = "quickfix"

" jedi-vim
let g:jedi#use_splits_not_buffers = 'right'
let g:jedi#show_call_signatures = '2'

" Tender theme
if (has("termguicolors"))
    set termguicolors
endif

let g:airline_theme = 'tender'
let macvim_skip_colorscheme=1
