var Runner = require('debugger-runner')
  , Connection = require('debugger-connection')
  , Breakpoints = require('debugger-breakpoint')
  , Scripts = require('debugger-script')
  , Frames = require('debugger-frame')
  , Variable = require('debugger-frame/lib/variable')
  , q = require('q')
  , proto;

module.exports = Debugger;

function Debugger() {
  this.runner = new Runner();
  this.connection = new Connection(this.runner);
  this.breakpoints = new Breakpoints(this.connection);
  this.scripts = new Scripts(this.connection);
  this.frames = new Frames(this.connection);
}

proto = Debugger.prototype;


/**
 * Continue request
 * @param  {String} action with types [in/next/out]
 */
proto.continue = function(action) {
  var options;

  if (action) {
    options = {};
    options.stepcount = 1;
    options.stepaction = action;
  }

  this.connection.request('continue', options, function(err) {
    if (err) {
      console.log(err)
    }
  });
};

proto.eval = function(expr) {
  var self = this;

  return q.Promise(function(resolve, reject) {
    self.connection.request('evaluate', {
      expression: expr
    }, function(err, body) {
      if (err) { return reject(err); }

      if (body.type === 'object') {
        body = new Variable({
          name: '',
          value: body
        }, self.connection);
      }
      resolve(body);
    });
  });
};
