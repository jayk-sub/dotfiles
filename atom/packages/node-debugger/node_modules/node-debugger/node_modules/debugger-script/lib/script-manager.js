var EventEmitter = require('events').EventEmitter
  , inherits = require('util').inherits
  , Immutable = require('immutable')
  , q = require('q')
  , ScriptGen = require('./script')
  , proto;

module.exports = ScriptManager;

inherits(ScriptManager, EventEmitter);
function ScriptManager(client) {
  EventEmitter.call(this);
  this.scripts = Immutable.Map();
  this.client = client;
  this.init = this.init.bind(this);
  client.on('change', this.init);
  client.on('break', onbreak.bind(this));
  client.on('afterCompile', addScript.bind(this));
}

proto = ScriptManager.prototype;

function addScript(script) {
  this.scripts = this.scripts.set(script.id, new this.Script(script));
}

function onbreak(event) {
  var body = event.body
    , Script = this.Script
    , script
    , breakScript
    , self = this;

  self.emit('break', new Script(body.script), body.sourceLine);
}

proto.init = function() {
  var Script = ScriptGen(this.client)
    , self = this;

  self.Script = Script;
  if (self.client._connected) {
    self.emit('change', self.scripts);
  }
  else {
    self.scripts = Immutable.Map();
  }
};

proto.fetch = function() {
  this.init();
};


/**
 * get all the scripts
 */
proto.getScripts = function() {
  return this.scripts;
};


/**
 * get the item by id
 * @param {Number} id script id to get
 * @return {Promise} promise with script object
 */
proto.getById = function(id) {
  var self = this
    , scripts = self.scripts;

  return q.Promise(function(resolve, reject) {
    var script = scripts.get(id)
    if (script && (script.isInFileSystem() || script.source)) {
      return resolve(script);
    }

    self.Script.fetchById(id).then(function(script) {
      self.scripts = scripts.set(script.id, script);
      resolve(script);
    }, function(err) {
      reject(new Error(err));
    });
  });
};


/**
 * get item by name
 * @param {String} name for file
 */
proto.getByName = function(name) {
  var scripts = this.scripts.filter(function(script) {
    return script.name === body.script.name;
  });

  return q.Promise(function(resolve, reject) {
    scripts.count() > 0 ? resolve(scripts.first()) : reject(new Error('not found'));
  });
};
