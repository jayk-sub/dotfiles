var spawn = require('child_process').spawn
  , inherits = require('util').inherits
  , EventEmitter = require('events').EventEmitter
  , portscanner = require('portscanner')
  , runner;


/**
 * @class Runner
 *
 * @property {Config} config
 * @property {Process} proc
 * @property {Number} port
 *
 * Events:
 *
 * `change`
 *
 * ```js
 * runner.on('change', function() {});
 * ```
 *
 *
 * @param {Config} config
 *
 */
inherits(Runner, EventEmitter);
function Runner(config) {
  EventEmitter.call(this);

  if (config) {
    this.config = config;
  }
}

runner = Runner.prototype;

/**
 * Start a runner
 *
 * Example:
 *
 * ```js
 * runner.start();
 * ```
 *
 */
runner.start = function(config) {
  var self = this;

  if (config) {
    this.config = config;
  }
  portscanner.findAPortNotInUse(5858, 65533, '127.0.0.1', function(err, port) {
    var args = '';

    if (config) {
      config.args = config.args || '';
      args = config.args;
    }

    args = args.split(' ');

    self.proc = spawn(self.config.nodePath, [
      '--debug-brk=' + port,
      self.config.runPath
    ].concat(args));
    self.port = port;
    self.proc.on('error', onerror.bind(self));
    self.proc.on('exit', onexit.bind(self));
    self.emit('change', self.proc);
  });
};


/**
 * Restart a server
 *
 * Example:
 *
 * ```js
 * runner.restart();
 * ```
 *
 * @return {Undefined}
 */
runner.restart = function() {
  var self = this;

  if (!self.proc) {
    return self.start();
  }

  self.stop();
  self.proc.once('exit', function() {
    self.proc = null;
    self.port = null;
    self.start();
  });
};

/**
 * Kill the process
 *
 * ```js
 * runner.stop();
 * ``
 *
 */
runner.stop = function() {
  var self = this;
  self.proc.kill();
};


function onerror(err) {
  this.emit('error', err);
}

function onexit() {
  this.proc = null;
  this.emit('change');
}

module.exports = Runner;
