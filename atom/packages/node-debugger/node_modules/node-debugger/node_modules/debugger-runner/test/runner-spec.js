var rewire = require('rewire')
  , Runner = rewire('..')
  , sinon = require('sinon')
  , EV = require('events').EventEmitter
  , portscanner = require('portscanner')
  , test = require('tape');

(function() {
  var spawn, config, spawnMock, procStub;

  function setup() {
    spawn = Runner.__get__('spawn');
    config = new EV();
    procStub = new EV();
    spawnMock = sinon.stub().returns(procStub);
    Runner.__set__('spawn', spawnMock);
  }

  function setupAgain() {
    config.nodePath = '/path/to/node';
    var stubbed = sinon.stub(portscanner, 'findAPortNotInUse').callsArgWith(3, null, 5858);

    Runner.__set__('portscanner', portscanner);
  }

  function tearDown() {
    Runner.__set__('spawn', spawn);
    portscanner.findAPortNotInUse.restore();
  }

  function run(fn) {
    return function(t) {
      setup();
      setupAgain();
      fn(t);
      tearDown();
    }
  }


  test('should spawn node process', run(function(t) {
    t.plan(1);
    var runner = new Runner();
    runner.start(config);

    t.equal(spawnMock.args[0][0], '/path/to/node');
  }));

  test('should spawn node with debug-brk param', run(function(t) {
    t.plan(1);
    var runner = new Runner();

    runner.start(config);

    t.ok(/^--debug-brk/.test(spawnMock.args[0][1][0]));
  }));

  test('should start node with random port', run(function(t) {
    t.plan(1);
    var runner = new Runner();
    runner.start(config)
    t.equal(spawnMock.args[0][1][0], '--debug-brk=5858');
  }));

  test('should able to start the js file in config', run(function(t) {
    t.plan(1);
    var runner = new Runner();
    config.runPath = '/path/to/js/file.js';

    runner.start(config);
    t.equal(spawnMock.args[0][1][1], '/path/to/js/file.js');
  }));

  test('should be able to throw error when there are some error in the', run(function(t) {
    t.plan(1);
    var runner = new Runner();
    var errCb = sinon.stub();
    runner.start(config);

    runner.on('error', errCb);
    procStub.emit('error', new Error('error to test'));
    t.ok(errCb.called);
  }));

  test('should be able to stop the process', run(function(t) {
    t.plan(1);
    var runner = new Runner();
    procStub.kill = sinon.stub();
    runner.start(config);
    runner.stop();
    t.ok(procStub.kill.called);
  }));

  test('should be able to restart the process', run(function(t) {
    t.plan(1);
    var runner = new Runner();
    procStub.kill = sinon.stub();
    runner.start(config)
    runner.restart();
    procStub.emit('exit');
    t.equal(spawnMock.callCount, 2);
  }));

  test('should be able to start the process when its not started', run(function(t) {
    t.plan(1);
    var runner = new Runner(config);
    runner.restart();
    t.equal(spawnMock.callCount, 1);
  }));
}());
