var _ = require('lodash')
  , EventEmitter = require('events').EventEmitter
  , inherits = require('util').inherits
  , q = require('q');

var TYPE = {
  FUNCTION: 'function',
  SCRIPT: 'script',
  SCRIPT_ID: 'scriptId',
  SCRIPT_REGEXP: 'scriptRegExp'
};

Object.freeze(TYPE);

/**
 * Breakpoint
 * @param {Object} data from debug server
 *
 * @property {Number} number   <breakpoint id number>
 * @property {String} type         <"function" or "script" or "scriptId" or "scriptRegExp">
 * @property {Number} line         <line in script or function>
 * @property {Number} column       <character position within the line>
 * @property {Boolean} enabled      <initial enabled state. True or false, default is true>
 * @property {String} condition    <string with break point condition>
 * @property {Number} ignoreCount
 */
inherits(Breakpoint, EventEmitter);
function Breakpoint(data) {
  EventEmitter.call(this);
  _.extend(this, data);
}


Breakpoint.TYPE = TYPE;

var breakpoint = Breakpoint.prototype;

breakpoint.merge = function(breakpoint) {
  _.extend(this, breakpoint);
  this.emit('change');
}


/**
 * save breakpoint changes
 *
 * Example:
 *
 * ```js
 * // save breakpoint changes
 * manager.create({
 *   type: TYPE.SCRIPT,
 *   line: 100
 * }).then(function(breakpoint) {
 *   breakpoint.enabled = false;
 *   return breakpoint.save();
 * });
 * ```
 *
 * @return {Promise} [function(breakpoint)]
 */
breakpoint.save = function() {
  var client = this._client
    , self = this;

  return q.Promise(function(resolve, reject) {
    client.request('changebreakpoint', self, function(err, response) {
      if (err) {
        return reject(new Error(err));
      }

      var response = response.body;
      resolve(self);
    });
  });
};

module.exports = Breakpoint;
